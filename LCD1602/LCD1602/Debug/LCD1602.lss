
LCD1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000149  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000157  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b9  00000000  00000000  0000017f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d0  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000098  00000098  0000010c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.iniport 00000010  00000082  00000082  000000f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000006  00000092  00000092  00000106  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000a0  000000a0  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000a2  000000a2  00000116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000a4  000000a4  00000118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  0000009c  0000009c  00000110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 36 00 	jmp	0x6c	; 0x6c <_etext>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.iniport:

00000082 <iniport>:
#include <util/delay.h>

int iniport()
{
	
	DDRB=0xFF; // 
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF; //
  86:	81 bb       	out	0x11, r24	; 17
	
	PORTB=0b11100000;//
  88:	80 ee       	ldi	r24, 0xE0	; 224
  8a:	88 bb       	out	0x18, r24	; 24
	PORTD=0b11110100; //
  8c:	84 ef       	ldi	r24, 0xF4	; 244
  8e:	82 bb       	out	0x12, r24	; 18

 

}
  90:	08 95       	ret

Disassembly of section .text.main:

00000092 <main>:
{

	
    while(1)
    {
	 iniport();
  92:	0e 94 41 00 	call	0x82	; 0x82 <iniport>
  96:	fd cf       	rjmp	.-6      	; 0x92 <main>

Disassembly of section .text.__dummy_fini:

000000a0 <_fini>:
  a0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000a2 <__funcs_on_exit>:
  a2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000a4 <__simulator_exit>:
  a4:	08 95       	ret

Disassembly of section .text.exit:

0000006c <exit>:
  6c:	ec 01       	movw	r28, r24
  6e:	0e 94 51 00 	call	0xa2	; 0xa2 <__funcs_on_exit>
  72:	0e 94 50 00 	call	0xa0	; 0xa0 <_fini>
  76:	ce 01       	movw	r24, r28
  78:	0e 94 52 00 	call	0xa4	; 0xa4 <__simulator_exit>
  7c:	ce 01       	movw	r24, r28
  7e:	0e 94 4e 00 	call	0x9c	; 0x9c <_Exit>

Disassembly of section .text._Exit:

0000009c <_Exit>:
  9c:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
