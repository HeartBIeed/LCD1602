
LCD1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000242  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000271  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000027f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d42  00000000  00000000  000002cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039d  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d5  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045c  00000000  00000000  00001c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000020f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001c0  000001c0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002138  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.iniport 00000010  000001a8  000001a8  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.sendbyte 0000002a  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.send    0000002a  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_ini 00000094  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendchar 00000008  000001b8  000001b8  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.setpos  00000012  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    0000002c  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  000001c8  000001c8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  000001ca  000001ca  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000001cc  000001cc  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  000001c4  000001c4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
   8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
   c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 80 00 	call	0x100	; 0x100 <main>
  64:	0c 94 c0 00 	jmp	0x180	; 0x180 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000001c0 <__bad_interrupt>:
 1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.iniport:

000001a8 <iniport>:


void iniport(void)
{
	
	DDRB=0xFF; // выход
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF; 
 1ac:	81 bb       	out	0x11, r24	; 17
	
	PORTB=0b00000111;// установка пинов
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	88 bb       	out	0x18, r24	; 24
	PORTD=0b00101111; 
 1b2:	8f e2       	ldi	r24, 0x2F	; 47
 1b4:	82 bb       	out	0x12, r24	; 18
 1b6:	08 95       	ret

Disassembly of section .text.sendbyte:

0000012c <sendbyte>:
}

void sendbyte(unsigned char c) // отправка байта
{
	
	E1;
 12c:	98 b3       	in	r25, 0x18	; 24
 12e:	94 60       	ori	r25, 0x04	; 4
 130:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	95 e8       	ldi	r25, 0x85	; 133
 134:	9a 95       	dec	r25
 136:	f1 f7       	brne	.-4      	; 0x134 <sendbyte+0x8>
 138:	00 00       	nop
		_delay_us(50);
		
	PORTD &= 0b11110000; // отчистка Д порта
 13a:	92 b3       	in	r25, 0x12	; 18
 13c:	90 7f       	andi	r25, 0xF0	; 240
 13e:	92 bb       	out	0x12, r25	; 18
	PORTD  |= c;
 140:	92 b3       	in	r25, 0x12	; 18
 142:	89 2b       	or	r24, r25
 144:	82 bb       	out	0x12, r24	; 18
	
	E0;	
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8b 7f       	andi	r24, 0xFB	; 251
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	85 e8       	ldi	r24, 0x85	; 133
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <sendbyte+0x22>
 152:	00 00       	nop
 154:	08 95       	ret

Disassembly of section .text.send:

00000156 <send>:
		_delay_us(50);
		
	}

void send(unsigned char c,unsigned char mode)
{
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
	if (mode ==0) 
 15a:	61 11       	cpse	r22, r1
 15c:	04 c0       	rjmp	.+8      	; 0x166 <send+0x10>
	{RS0; // команда 0
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	88 bb       	out	0x18, r24	; 24
 164:	03 c0       	rjmp	.+6      	; 0x16c <send+0x16>
	} 
	else
	{RS1; // данные 1
 166:	88 b3       	in	r24, 0x18	; 24
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	88 bb       	out	0x18, r24	; 24
	}
	
	unsigned char hc=0;
	hc = c >> 4;

sendbyte(hc); // ct полубайт
 16c:	8c 2f       	mov	r24, r28
 16e:	82 95       	swap	r24
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	0e 94 96 00 	call	0x12c	; 0x12c <sendbyte>
sendbyte(c);	// ml полубайт
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 96 00 	call	0x12c	; 0x12c <sendbyte>
	
	
}
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

Disassembly of section .text.LCD_ini:

0000006c <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	8f e2       	ldi	r24, 0x2F	; 47
  6e:	95 e7       	ldi	r25, 0x75	; 117
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <LCD_ini+0x4>
  74:	00 c0       	rjmp	.+0      	; 0x76 <LCD_ini+0xa>
  76:	00 00       	nop
}

void LCD_ini(void)
{
_delay_ms(15);
sendbyte(0b00000011);  // 11 включает 4 битный режим
  78:	83 e0       	ldi	r24, 0x03	; 3
  7a:	0e 94 96 00 	call	0x12c	; 0x12c <sendbyte>
  7e:	8f e0       	ldi	r24, 0x0F	; 15
  80:	97 e2       	ldi	r25, 0x27	; 39
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <LCD_ini+0x16>
  86:	00 c0       	rjmp	.+0      	; 0x88 <LCD_ini+0x1c>
  88:	00 00       	nop
_delay_ms(5);
sendbyte(0b00000011);
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	0e 94 96 00 	call	0x12c	; 0x12c <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	87 ec       	ldi	r24, 0xC7	; 199
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_ini+0x28>
  98:	00 c0       	rjmp	.+0      	; 0x9a <LCD_ini+0x2e>
  9a:	00 00       	nop
_delay_us(100);
sendbyte(0b00000011);
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	0e 94 96 00 	call	0x12c	; 0x12c <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ec       	ldi	r24, 0xCF	; 207
  a4:	97 e0       	ldi	r25, 0x07	; 7
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_ini+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_ini+0x40>
  ac:	00 00       	nop
_delay_ms(1);
sendbyte(0b00000010);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 96 00 	call	0x12c	; 0x12c <sendbyte>
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_ini+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_ini+0x52>
  be:	00 00       	nop
_delay_ms(1);
sendbyte(0b00000010);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 96 00 	call	0x12c	; 0x12c <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	9a e6       	ldi	r25, 0x6A	; 106
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_ini+0x5c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_ini+0x62>

_delay_us(40);

	send(0b00101000, 0); // отправка команд
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	0e 94 ab 00 	call	0x156	; 0x156 <send>
  d6:	8a e6       	ldi	r24, 0x6A	; 106
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_ini+0x6c>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_ini+0x72>

_delay_us(40);

	send(0b00001100, 0);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	0e 94 ab 00 	call	0x156	; 0x156 <send>
  e6:	9a e6       	ldi	r25, 0x6A	; 106
  e8:	9a 95       	dec	r25
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_ini+0x7c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_ini+0x82>
	
_delay_us(40);

	send(0b00000110, 0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 ab 00 	call	0x156	; 0x156 <send>
  f6:	8a e6       	ldi	r24, 0x6A	; 106
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_ini+0x8c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_ini+0x92>
  fe:	08 95       	ret

Disassembly of section .text.sendchar:

000001b8 <sendchar>:
}

void sendchar(unsigned char c)
{

	send(c,1);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	0e 94 ab 00 	call	0x156	; 0x156 <send>
 1be:	08 95       	ret

Disassembly of section .text.setpos:

00000196 <setpos>:

{

	char adress;

	adress=(0x40*y+x)|0b10000000;
 196:	90 e4       	ldi	r25, 0x40	; 64
 198:	69 9f       	mul	r22, r25
 19a:	80 0d       	add	r24, r0
 19c:	11 24       	eor	r1, r1

	send(adress, 0);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	0e 94 ab 00 	call	0x156	; 0x156 <send>
 1a6:	08 95       	ret

Disassembly of section .text.main:

00000100 <main>:

	
    while(1)
    {
		
	 iniport();
 100:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <iniport>
	 LCD_ini();
 104:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
	 
	 setpos(0,0);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 cb 00 	call	0x196	; 0x196 <setpos>

	 sendchar('D');
 112:	84 e4       	ldi	r24, 0x44	; 68
 114:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <sendchar>
	 sendchar('I');
 118:	89 e4       	ldi	r24, 0x49	; 73
 11a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <sendchar>
	 sendchar('M');
 11e:	8d e4       	ldi	r24, 0x4D	; 77
 120:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <sendchar>
	 sendchar('A');
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <sendchar>
 12a:	ea cf       	rjmp	.-44     	; 0x100 <main>

Disassembly of section .text.__dummy_fini:

000001c8 <_fini>:
 1c8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ca <__funcs_on_exit>:
 1ca:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001cc <__simulator_exit>:
 1cc:	08 95       	ret

Disassembly of section .text.exit:

00000180 <exit>:
 180:	ec 01       	movw	r28, r24
 182:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__funcs_on_exit>
 186:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_fini>
 18a:	ce 01       	movw	r24, r28
 18c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__simulator_exit>
 190:	ce 01       	movw	r24, r28
 192:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Exit>

Disassembly of section .text._Exit:

000001c4 <_Exit>:
 1c4:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
