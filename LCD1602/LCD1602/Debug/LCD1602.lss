
LCD1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000240  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cde  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  00000fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035e  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001de  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f2  00000000  00000000  00001c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001be  000001be  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002054  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.iniport 00000010  000001a6  000001a6  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.sendbyte 0000002a  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.send    0000002a  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_ini 000000ba  0000006e  0000006e  000000e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendchar 00000008  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000002  0000006c  0000006c  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    00000014  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  000001c6  000001c6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  000001c8  000001c8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  000001ca  000001ca  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  0000017c  0000017c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  000001c2  000001c2  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  64:	0c 94 be 00 	jmp	0x17c	; 0x17c <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000001be <__bad_interrupt>:
 1be:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.iniport:

000001a6 <iniport>:
#define RS0 PORTB&=0b11111110 // установка линии RS в 0 (команда)

int iniport(void)
{
	
	DDRB=0xFF; // выход
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF; 
 1aa:	81 bb       	out	0x11, r24	; 17
	
	PORTB=0b00000111;// установка пинов
 1ac:	87 e0       	ldi	r24, 0x07	; 7
 1ae:	88 bb       	out	0x18, r24	; 24
	PORTD=0b00101111; 
 1b0:	8f e2       	ldi	r24, 0x2F	; 47
 1b2:	82 bb       	out	0x12, r24	; 18

 

}
 1b4:	08 95       	ret

Disassembly of section .text.sendbyte:

00000128 <sendbyte>:
}

void sendbyte(unsigned char c) // отправка байта
{
	
	E1;
 128:	98 b3       	in	r25, 0x18	; 24
 12a:	94 60       	ori	r25, 0x04	; 4
 12c:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	95 e8       	ldi	r25, 0x85	; 133
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <sendbyte+0x8>
 134:	00 00       	nop
		_delay_us(50);
		
	PORTD &= 0b11110000; // отчистка ƒ порта
 136:	92 b3       	in	r25, 0x12	; 18
 138:	90 7f       	andi	r25, 0xF0	; 240
 13a:	92 bb       	out	0x12, r25	; 18
	PORTD  |= c;
 13c:	92 b3       	in	r25, 0x12	; 18
 13e:	89 2b       	or	r24, r25
 140:	82 bb       	out	0x12, r24	; 18
	
	E0;	
 142:	88 b3       	in	r24, 0x18	; 24
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	88 bb       	out	0x18, r24	; 24
 148:	85 e8       	ldi	r24, 0x85	; 133
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <sendbyte+0x22>
 14e:	00 00       	nop
 150:	08 95       	ret

Disassembly of section .text.send:

00000152 <send>:
		_delay_us(50);
		
	}

void send(unsigned char c,unsigned char mode)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
	if (mode ==0) 
 156:	61 11       	cpse	r22, r1
 158:	04 c0       	rjmp	.+8      	; 0x162 <send+0x10>
	{RS0; // команда 0
 15a:	88 b3       	in	r24, 0x18	; 24
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	88 bb       	out	0x18, r24	; 24
 160:	03 c0       	rjmp	.+6      	; 0x168 <send+0x16>
	} 
	else
	{RS1; // данные 1
 162:	88 b3       	in	r24, 0x18	; 24
 164:	81 60       	ori	r24, 0x01	; 1
 166:	88 bb       	out	0x18, r24	; 24
	}
	
	unsigned char hc=0;
	hc = c >> 4;

sendbyte(hc); // мл полубайт
 168:	8c 2f       	mov	r24, r28
 16a:	82 95       	swap	r24
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	0e 94 94 00 	call	0x128	; 0x128 <sendbyte>
sendbyte(c);	// ст полубайт
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 94 00 	call	0x128	; 0x128 <sendbyte>
	
	
}
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

Disassembly of section .text.LCD_ini:

0000006e <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	8f e2       	ldi	r24, 0x2F	; 47
  70:	95 e7       	ldi	r25, 0x75	; 117
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <LCD_ini+0x4>
  76:	00 c0       	rjmp	.+0      	; 0x78 <LCD_ini+0xa>
  78:	00 00       	nop
}

void LCD_ini(void)
{
_delay_ms(15);
sendbyte(0b00000011);  // 11 включает 4 битный режим
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	0e 94 94 00 	call	0x128	; 0x128 <sendbyte>
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	97 e2       	ldi	r25, 0x27	; 39
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <LCD_ini+0x18>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <LCD_ini+0x1e>
  8c:	00 00       	nop
_delay_ms(5);
sendbyte(0b00000011);
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 94 00 	call	0x128	; 0x128 <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f e8       	ldi	r24, 0x8F	; 143
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_ini+0x2c>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_ini+0x32>
  a0:	00 00       	nop
_delay_us(200);
sendbyte(0b00000011);
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 94 00 	call	0x128	; 0x128 <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f ec       	ldi	r24, 0xCF	; 207
  ac:	97 e0       	ldi	r25, 0x07	; 7
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_ini+0x40>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_ini+0x46>
  b4:	00 00       	nop
_delay_ms(1);
sendbyte(0b00000010);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 94 00 	call	0x128	; 0x128 <sendbyte>
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_ini+0x54>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_ini+0x5a>
  c8:	00 00       	nop
_delay_ms(1);
sendbyte(0b00000010);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 94 00 	call	0x128	; 0x128 <sendbyte>
  d2:	8f ec       	ldi	r24, 0xCF	; 207
  d4:	97 e0       	ldi	r25, 0x07	; 7
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_ini+0x68>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_ini+0x6e>
  dc:	00 00       	nop
_delay_ms(1);

	send(0b00101000, 0); // отправка команд
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	88 e2       	ldi	r24, 0x28	; 40
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 a9 00 	call	0x152	; 0x152 <send>
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_ini+0x80>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_ini+0x86>
  f4:	00 00       	nop

_delay_ms(1);

	send(0b00001100, 0);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 a9 00 	call	0x152	; 0x152 <send>
 102:	8f ec       	ldi	r24, 0xCF	; 207
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_ini+0x98>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_ini+0x9e>
 10c:	00 00       	nop
	
_delay_ms(1);

	send(0b00000110, 0);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 a9 00 	call	0x152	; 0x152 <send>
 11a:	8f ec       	ldi	r24, 0xCF	; 207
 11c:	97 e0       	ldi	r25, 0x07	; 7
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_ini+0xb0>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_ini+0xb6>
 124:	00 00       	nop
 126:	08 95       	ret

Disassembly of section .text.sendchar:

000001b6 <sendchar>:
}

void sendchar(unsigned char c)
{

	send(c,1);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	0e 94 a9 00 	call	0x152	; 0x152 <send>
 1bc:	08 95       	ret

Disassembly of section .text.main:

00000192 <main>:

	
    while(1)
    {
		
	 iniport();
 192:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <iniport>
	 LCD_ini();
 196:	0e 94 37 00 	call	0x6e	; 0x6e <LCD_ini>
	 sendchar("n");
 19a:	8c e6       	ldi	r24, 0x6C	; 108
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	a0 e0       	ldi	r26, 0x00	; 0
 1a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <sendchar>
 1a4:	f6 cf       	rjmp	.-20     	; 0x192 <main>

Disassembly of section .text.__dummy_fini:

000001c6 <_fini>:
 1c6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001c8 <__funcs_on_exit>:
 1c8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ca <__simulator_exit>:
 1ca:	08 95       	ret

Disassembly of section .text.exit:

0000017c <exit>:
 17c:	ec 01       	movw	r28, r24
 17e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__funcs_on_exit>
 182:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_fini>
 186:	ce 01       	movw	r24, r28
 188:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__simulator_exit>
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Exit>

Disassembly of section .text._Exit:

000001c2 <_Exit>:
 1c2:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
