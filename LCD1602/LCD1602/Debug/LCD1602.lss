
LCD1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000298  0000032c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000035b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001217  00000000  00000000  000003e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d8  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000509  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  000022e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001eb  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000748  00000000  00000000  000025df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000282  00000282  00000316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.sendbyte 0000002e  000001d8  000001d8  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.send    0000002a  00000206  00000206  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_ini 00000092  00000146  00000146  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.sendchar 00000014  00000266  00000266  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .rodata       00000008  00800060  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.load_my_char 00000096  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.iniport 00000008  0000027a  0000027a  0000030e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000020  00000230  00000230  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  0000028a  0000028a  0000031e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  0000028c  0000028c  00000320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  0000028e  0000028e  00000322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  00000250  00000250  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  00000286  00000286  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 68       	ori	r16, 0x80	; 128
  58:	00 02       	muls	r16, r16
  5a:	90 00       	.word	0x0090	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 18 01 	call	0x230	; 0x230 <main>
  a8:	0c 94 28 01 	jmp	0x250	; 0x250 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

00000282 <__bad_interrupt>:
 282:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.sendbyte:

000001d8 <sendbyte>:

}

void sendbyte(unsigned char c) // отправка байта
{
	  c<<=4; // сдвигаем байт младшей тетрадой к старшей
 1d8:	82 95       	swap	r24
 1da:	80 7f       	andi	r24, 0xF0	; 240


	E1;
 1dc:	92 b3       	in	r25, 0x12	; 18
 1de:	98 60       	ori	r25, 0x08	; 8
 1e0:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	95 e8       	ldi	r25, 0x85	; 133
 1e4:	9a 95       	dec	r25
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <sendbyte+0xc>
 1e8:	00 00       	nop
		_delay_us(50);
		
	PORTD &= 0b00001111; // отчистка старшей тетрады Д порта
 1ea:	92 b3       	in	r25, 0x12	; 18
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	92 bb       	out	0x12, r25	; 18
	PORTD  |= c; // отправляем старшую тетраду
 1f0:	92 b3       	in	r25, 0x12	; 18
 1f2:	89 2b       	or	r24, r25
 1f4:	82 bb       	out	0x12, r24	; 18
	
	E0;	
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	87 7f       	andi	r24, 0xF7	; 247
 1fa:	82 bb       	out	0x12, r24	; 18
 1fc:	85 e8       	ldi	r24, 0x85	; 133
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <sendbyte+0x26>
 202:	00 00       	nop
 204:	08 95       	ret

Disassembly of section .text.send:

00000206 <send>:
		_delay_us(50);
		
	}

void send(unsigned char c,unsigned char mode)
{
 206:	cf 93       	push	r28
 208:	c8 2f       	mov	r28, r24
	if (mode ==0) 
 20a:	61 11       	cpse	r22, r1
 20c:	04 c0       	rjmp	.+8      	; 0x216 <send+0x10>
	{RS0; // команда 0
 20e:	82 b3       	in	r24, 0x12	; 18
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	82 bb       	out	0x12, r24	; 18
 214:	03 c0       	rjmp	.+6      	; 0x21c <send+0x16>
	} 
	else
	{RS1; // данные 1
 216:	82 b3       	in	r24, 0x12	; 18
 218:	84 60       	ori	r24, 0x04	; 4
 21a:	82 bb       	out	0x12, r24	; 18
	}
	
	unsigned char hc=0;
	hc = c >> 4;

sendbyte(hc); // старший полубайт
 21c:	8c 2f       	mov	r24, r28
 21e:	82 95       	swap	r24
 220:	8f 70       	andi	r24, 0x0F	; 15
 222:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sendbyte>
sendbyte(c);	// младший  полубайт
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sendbyte>
	
	
}
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

Disassembly of section .text.LCD_ini:

00000146 <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f e2       	ldi	r24, 0x2F	; 47
 148:	95 e7       	ldi	r25, 0x75	; 117
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_ini+0x4>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_ini+0xa>
 150:	00 00       	nop


void LCD_ini(void)
{
_delay_ms(15);
sendbyte(0b00000011);  // 11 включает 4 битный режим
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sendbyte>
 158:	8f e3       	ldi	r24, 0x3F	; 63
 15a:	9f e1       	ldi	r25, 0x1F	; 31
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_ini+0x16>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_ini+0x1c>
 162:	00 00       	nop
_delay_ms(4);
sendbyte(0b00000011);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	87 ec       	ldi	r24, 0xC7	; 199
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_ini+0x28>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_ini+0x2e>
 174:	00 00       	nop
_delay_us(100);
sendbyte(0b00000011);
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f ec       	ldi	r24, 0xCF	; 207
 17e:	97 e0       	ldi	r25, 0x07	; 7
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_ini+0x3a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_ini+0x40>
 186:	00 00       	nop
_delay_ms(1);
sendbyte(0b00000010);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <sendbyte>
 18e:	8f ec       	ldi	r24, 0xCF	; 207
 190:	97 e0       	ldi	r25, 0x07	; 7
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_ini+0x4c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_ini+0x52>
 198:	00 00       	nop
_delay_ms(1);


	send(0b00101000, 0); // отправка команд
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	88 e2       	ldi	r24, 0x28	; 40
 19e:	0e 94 03 01 	call	0x206	; 0x206 <send>
 1a2:	8f ec       	ldi	r24, 0xCF	; 207
 1a4:	97 e0       	ldi	r25, 0x07	; 7
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_ini+0x60>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_ini+0x66>
 1ac:	00 00       	nop

_delay_ms(1);

	send(0b00001100, 0);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 03 01 	call	0x206	; 0x206 <send>
 1b6:	8f ec       	ldi	r24, 0xCF	; 207
 1b8:	97 e0       	ldi	r25, 0x07	; 7
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_ini+0x74>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_ini+0x7a>
 1c0:	00 00       	nop
	
_delay_ms(1);

	send(0b00000110, 0);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 03 01 	call	0x206	; 0x206 <send>
 1ca:	8f ec       	ldi	r24, 0xCF	; 207
 1cc:	97 e0       	ldi	r25, 0x07	; 7
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_ini+0x88>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_ini+0x8e>
 1d4:	00 00       	nop
 1d6:	08 95       	ret

Disassembly of section .text.sendchar:

00000266 <sendchar>:
}

void sendchar(unsigned char c) // отправка 1 символа
{

	send(c,1);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	0e 94 03 01 	call	0x206	; 0x206 <send>
 26c:	8f e1       	ldi	r24, 0x1F	; 31
 26e:	9e e4       	ldi	r25, 0x4E	; 78
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <sendchar+0xa>
 274:	00 c0       	rjmp	.+0      	; 0x276 <sendchar+0x10>
 276:	00 00       	nop
 278:	08 95       	ret

Disassembly of section .text.load_my_char:

000000b0 <load_my_char>:
	    }
}


void load_my_char()
{
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	28 97       	sbiw	r28, 0x08	; 8
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
uint8_t my_symb[1][8] = { // 1 symbols 8 -bytes
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <load_my_char+0x26>
			0b00000000}};//CGRAM
	
	
	
	
	send(0x40, 0);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	0e 94 03 01 	call	0x206	; 0x206 <send>
	for (int i=0; i < 1; i++) //num symbols
  e6:	e1 2c       	mov	r14, r1
  e8:	f1 2c       	mov	r15, r1
  ea:	1d c0       	rjmp	.+58     	; 0x126 <load_my_char+0x76>
	{
		for (int j=0; j < 8; j++)
		{
			sendchar(my_symb[i][j]);
  ec:	f7 01       	movw	r30, r14
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	8c 0f       	add	r24, r28
 100:	9d 1f       	adc	r25, r29
 102:	e8 0f       	add	r30, r24
 104:	f9 1f       	adc	r31, r25
 106:	e0 0f       	add	r30, r16
 108:	f1 1f       	adc	r31, r17
 10a:	80 81       	ld	r24, Z
 10c:	0e 94 33 01 	call	0x266	; 0x266 <sendchar>
	
	
	send(0x40, 0);
	for (int i=0; i < 1; i++) //num symbols
	{
		for (int j=0; j < 8; j++)
 110:	0f 5f       	subi	r16, 0xFF	; 255
 112:	1f 4f       	sbci	r17, 0xFF	; 255
 114:	02 c0       	rjmp	.+4      	; 0x11a <load_my_char+0x6a>
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	08 30       	cpi	r16, 0x08	; 8
 11c:	11 05       	cpc	r17, r1
 11e:	34 f3       	brlt	.-52     	; 0xec <load_my_char+0x3c>
	
	
	
	
	send(0x40, 0);
	for (int i=0; i < 1; i++) //num symbols
 120:	9f ef       	ldi	r25, 0xFF	; 255
 122:	e9 1a       	sub	r14, r25
 124:	f9 0a       	sbc	r15, r25
 126:	1e 14       	cp	r1, r14
 128:	1f 04       	cpc	r1, r15
 12a:	ac f7       	brge	.-22     	; 0x116 <load_my_char+0x66>
		for (int j=0; j < 8; j++)
		{
			sendchar(my_symb[i][j]);
		}
	}
 12c:	28 96       	adiw	r28, 0x08	; 8
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	08 95       	ret

Disassembly of section .text.iniport:

0000027a <iniport>:



void iniport(void)
{
	PORTD=0x00;
 27a:	12 ba       	out	0x12, r1	; 18
	DDRD=0xFF;
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret

Disassembly of section .text.main:

00000230 <main>:



int main(void)
{
	iniport();
 230:	0e 94 3d 01 	call	0x27a	; 0x27a <iniport>
	LCD_ini();
 234:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_ini>
	
	
	
	//send_flash_str(PSTR("Hello")); //отправка вложенного текста из Флеш строки
	
	load_my_char();
 238:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
 23c:	8f e1       	ldi	r24, 0x1F	; 31
 23e:	9e e4       	ldi	r25, 0x4E	; 78
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x10>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x16>
 246:	00 00       	nop
	_delay_ms(10);
	sendchar(0);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 33 01 	call	0x266	; 0x266 <sendchar>
 24e:	ff cf       	rjmp	.-2      	; 0x24e <main+0x1e>

Disassembly of section .text.__dummy_fini:

0000028a <_fini>:
 28a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000028c <__funcs_on_exit>:
 28c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000028e <__simulator_exit>:
 28e:	08 95       	ret

Disassembly of section .text.exit:

00000250 <exit>:
 250:	ec 01       	movw	r28, r24
 252:	0e 94 46 01 	call	0x28c	; 0x28c <__funcs_on_exit>
 256:	0e 94 45 01 	call	0x28a	; 0x28a <_fini>
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 47 01 	call	0x28e	; 0x28e <__simulator_exit>
 260:	ce 01       	movw	r24, r28
 262:	0e 94 43 01 	call	0x286	; 0x286 <_Exit>

Disassembly of section .text._Exit:

00000286 <_Exit>:
 286:	0e 94 56 00 	call	0xac	; 0xac <_exit>
